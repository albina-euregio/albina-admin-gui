diff --git a/L.Map.Sync.js b/L.Map.Sync.js
index a4795da85847b413d75b43436d76de35666e7ae9..7610b5a859c8f272531c186a2336a15ac8005a9e 100644
--- a/L.Map.Sync.js
+++ b/L.Map.Sync.js
@@ -2,6 +2,8 @@
  * Extends L.Map to synchronize the interaction on one map to one or more other maps.
  */
 
+import * as L from "leaflet";
+
 (function () {
     var NO_ANIMATION = {
         animate: false,
@@ -9,33 +11,10 @@
         disableViewprereset: true
     };
 
-    L.Sync = function () {};
-    /*
-     * Helper function to compute the offset easily.
-     *
-     * The arguments are relative positions with respect to reference and target maps of
-     * the point to sync. If you provide ratioRef=[0, 1], ratioTarget=[1, 0] will sync the
-     * bottom left corner of the reference map with the top right corner of the target map.
-     * The values can be less than 0 or greater than 1. It will sync points out of the map.
-     */
-    L.Sync.offsetHelper = function (ratioRef, ratioTarget) {
-        var or = L.Util.isArray(ratioRef) ? ratioRef : [0.5, 0.5];
-        var ot = L.Util.isArray(ratioTarget) ? ratioTarget : [0.5, 0.5];
-        return function (center, zoom, refMap, targetMap) {
-            var rs = refMap.getSize();
-            var ts = targetMap.getSize();
-            var pt = refMap.project(center, zoom)
-                           .subtract([(0.5 - or[0]) * rs.x, (0.5 - or[1]) * rs.y])
-                           .add([(0.5 - ot[0]) * ts.x, (0.5 - ot[1]) * ts.y]);
-            return refMap.unproject(pt, zoom);
-        };
-    };
-
-
     L.Map.include({
         sync: function (map, options) {
             this._initSync();
-            options = L.extend({
+            options = Object.assign({
                 noInitialSync: false,
                 syncCursor: false,
                 syncCursorMarkerOptions: {
@@ -63,7 +42,7 @@
             }
             if (options.syncCursor) {
                 if (typeof map.cursor === 'undefined') {
-                    map.cursor = L.circleMarker([0, 0], options.syncCursorMarkerOptions).addTo(map);
+                    map.cursor = new L.CircleMarker([0, 0], options.syncCursorMarkerOptions).addTo(map);
                 }
 
                 this._cursors.push(map.cursor);
@@ -180,7 +159,7 @@
             this._cursors = [];
             this._syncOffsetFns = {};
 
-            L.extend(originalMap, {
+            Object.assign(originalMap, {
                 setView: function (center, zoom, options, sync) {
                     // Use this sandwich to disable and enable viewprereset
                     // around setView call
